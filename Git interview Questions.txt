1. What is the difference between Git and SVN?
Ans :
Git 

Git is a Decentralized Version Control tool
Clients can clone entire repositories on their local systems
Commits are possible even if offline

SVN
SVN is a  Centralized Version Control tool
Version history is stored on a server-side repository
Only online commits are allowed


2.What is Distributed VCS 
Ans 
In Distributed VCS, every user will can get a local copy or “clone” of the main repository.
These are the systems that don’t rely on a central server to store a project file and all its versions.


3. What is the difference between Git and Github?
Git is a version control system  that is used to track changes in source code during software development.

GitHub is a Git repository hosting service

4. What language is used in Git?
Git uses ‘C’ language. GIT is fast, and ‘C’ language makes this possible by reducing the
 overhead of run times associated with high-level languages.


>>>. How to resolve a conflict in Git?
The following steps will resolve conflict in Git-

Identify the files that have caused the conflict.

Make the necessary changes in the files so that conflict does not arise again.

Add these files by the command git add.

Finally to commit the changed file using the command git commit

>>>What is the difference between git pull and git fetch?

Git pull command pulls new changes or commits from a particular branch from your central repository and updates your target branch in your local repository.

Git fetch is also used for the same purpose but it works in a slightly different way. When you perform a git fetch, it pulls all new commits from the desired branch and stores it in a new branch in your local repository. If you want to reflect these changes in your target branch, git fetch must be followed with a git merge. Your target branch will only be updated after merging the target branch and fetched branch. Just to make it easy for you, remember the equation below:

Git pull = git fetch + git merge 


What is ‘staging area’ or ‘index’ in Git?
That before completing the commits, it can be formatted and reviewed in an intermediate area known as ‘Staging Area’ 





branching strategy

Feature branching – A feature branch model keeps all of the changes for a particular feature inside of a branch. When the feature is fully tested and validated by automated tests, the branch is then merged into master.

Task branching – In this model, each task is implemented on its own branch with the task key included in the branch name. It is easy to see which code implements which task, just look for the task key in the branch name.

Release branching – Once the develop branch has acquired enough features for a release, you can clone that branch to form a Release branch. Creating this branch starts the next release cycle, so no new features can be added after this point, only bug fixes, documentation generation, and other release-oriented tasks should go in this branch. Once it is ready to ship, the release gets merged into master and tagged with a version number. 
In addition, it should be merged back into the develop branch, which may have progressed since the release was initiated.


>>>What is the difference between rebasing and merge in Git?

In Git, the rebase command is used to integrate changes from one branch into another. 
It is an alternative to the “merge” command. The difference between rebasing and merge is that rebase rewrites the commit history in order to produce a straight, linear succession of commits.

Merging is Git’s way of putting a forked history back together again. 
The git merge command helps you take the independent lines of development created by git branch and integrate them into a single branch.

>>>Git Cherry-pick:
The command git cherry-pick is normally used to introduce particular commits from one branch within a repository onto a different branch. Another common use is to forward- or back-port commits from a maintenance branch to a development branch. This is in contrast with other ways such as merge and rebase which normally apply many commits onto another branch.

Consider:

git cherry-pick <commit-hash>


Learn all the commands which i provided in git notes 